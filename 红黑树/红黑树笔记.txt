红黑树
    二叉树分为平衡树和非平衡树。
    红黑树特征，节点都有颜色，插入和删除节点时要遵守红黑规则
    规则：
        1 每一个节点不是红的，就是黑色的
        2 根节点总是黑色的
        3 如果节点是红色的，则子节点必须是黑色
        4 从根到叶节点的每条路径，必须包含相同数目的黑色节点

  如果违反规则，可以的修正方法：
        1 改变节点的颜色
        2 旋转  在旋转过程中移动子树 


伪根，负无穷大。rchild 指向根节点




  


# AVL
     AVL树中搜索一个元素理论上是固定的复杂度。
     AVL tree strictly height balanced tree
    AVL 可能需要很多次去的旋转去做平衡，从下到上。甚至直到root节点。
# red black tree
    - 红黑树 roughly height balanced
    - 平衡一个红黑树只需要最多两次旋转（或者连旋转都不需要，单纯改变颜色即可），或者再加节点改变颜色即可。
       而AVL树则需要进行没有上限次的旋转。

#  区别
    如果需要频繁的searching，AVL树的速度更快，原因在于AVL树是严格平衡的。
    如果需要频繁的插入和删除节点，红黑树效率更好，原因在于红黑树需要的旋转次数更少。

# 红黑树特点
    - Self-balanced BST
    - Every node is either black or red. root node is always black.(grandpa always keep calm, not angry, so face is black)
    - Nil node is black.   
        leaf node 认识是属于红黑树的内部，而nil node 认为是红黑树的外部, 但是nil node可以更方便的帮助我们完成插入和删除的工作。
    - red node 的子节点必须是black
    - Every path from a node to any of its desendant nil node has same number of black nodesss.
        每条path上的，Nil节点一定都是black的，所以可以都不考虑。

举例：
    定义： perfect binary tree。 每个节点除了叶子结点都有两个孩子，且所有叶子结点都在同一层上。
    如果一棵树是perfect binary tree的话，那么它是一棵红黑树，且节点颜色均为黑色。



    

插入原则：
1 新节点默认按照红色节点，以正常的二叉搜索树插入，原因在于违规修复代价比较小
2 修复